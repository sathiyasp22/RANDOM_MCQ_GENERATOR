[{"D:\\MY PRO SRC\\RANDOM_MCQ_GENERATOR\\client\\src\\index.js":"1","D:\\MY PRO SRC\\RANDOM_MCQ_GENERATOR\\client\\src\\App.js":"2","D:\\MY PRO SRC\\RANDOM_MCQ_GENERATOR\\client\\src\\reportWebVitals.js":"3","D:\\MY PRO SRC\\RANDOM_MCQ_GENERATOR\\client\\src\\Components\\Home\\Home.jsx":"4","D:\\MY PRO SRC\\RANDOM_MCQ_GENERATOR\\client\\src\\Components\\Navbar\\Navbar.jsx":"5","D:\\MY PRO SRC\\RANDOM_MCQ_GENERATOR\\client\\src\\Components\\QuestionChoice\\QuestionChoice.jsx":"6","D:\\MY PRO SRC\\RANDOM_MCQ_GENERATOR\\client\\src\\Components\\Forms\\register.jsx":"7","D:\\MY PRO SRC\\RANDOM_MCQ_GENERATOR\\client\\src\\Components\\Forms\\login.jsx":"8","D:\\MY PRO SRC\\RANDOM_MCQ_GENERATOR\\client\\src\\Components\\DashBoard\\Profile.jsx":"9"},{"size":419,"mtime":1691336443321,"results":"10","hashOfConfig":"11"},{"size":1026,"mtime":1691337024067,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":1690695837527,"results":"13","hashOfConfig":"11"},{"size":255,"mtime":1690695837589,"results":"14","hashOfConfig":"11"},{"size":2262,"mtime":1691384329436,"results":"15","hashOfConfig":"11"},{"size":6387,"mtime":1691338535962,"results":"16","hashOfConfig":"11"},{"size":3801,"mtime":1691338439522,"results":"17","hashOfConfig":"11"},{"size":3788,"mtime":1691334100449,"results":"18","hashOfConfig":"11"},{"size":3661,"mtime":1691338379738,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1tucjd3",{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},"D:\\MY PRO SRC\\RANDOM_MCQ_GENERATOR\\client\\src\\index.js",[],[],"D:\\MY PRO SRC\\RANDOM_MCQ_GENERATOR\\client\\src\\App.js",["53"],[],"import \"./App.css\";\nimport Home from \"./Components/Home/Home\";\nimport { BrowserRouter, Routes, Route} from \"react-router-dom\";\nimport Login from \"./Components/Forms/login\";\nimport Register from \"./Components/Forms/register\";\nimport { useState, useEffect } from \"react\";\nimport Profile from \"./Components/DashBoard/Profile\";\n\nfunction App() {\n  const [token, setToken] = useState(\"\");\n  const [refresh,setRefresh] = useState(false)\n\n  useEffect(() => {\n    const userToken = localStorage.getItem(\"token\");\n    if (userToken) {\n      setToken(userToken);\n      setRefresh(true)\n    }\n  }, []);\n\n  return (\n    <BrowserRouter>\n      <Routes>\n        {\n          token ? <Route path=\"/\" element={<Home />} /> : <Route path=\"/login\" element={<Login />} />\n        }\n        {\n          token ? <Route path=\"/profile\" element={<Profile />} /> : <Route path=\"/login\" element={<Login />} />\n        }\n        \n        <Route path=\"/signup\" element={<Register />} />\n\n\n\n      </Routes>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","D:\\MY PRO SRC\\RANDOM_MCQ_GENERATOR\\client\\src\\reportWebVitals.js",[],[],[],"D:\\MY PRO SRC\\RANDOM_MCQ_GENERATOR\\client\\src\\Components\\Home\\Home.jsx",[],[],"D:\\MY PRO SRC\\RANDOM_MCQ_GENERATOR\\client\\src\\Components\\Navbar\\Navbar.jsx",["54"],[],"import { useState, useEffect } from \"react\";\nimport {\n  Box,\n  Flex,\n  Button,\n\n  useColorModeValue,\n  Stack,\n  useColorMode,\n  Text\n} from \"@chakra-ui/react\";\nimport { MoonIcon, SunIcon } from \"@chakra-ui/icons\";\nimport {  useNavigate ,NavLink} from \"react-router-dom\";\n\nexport default function Navbar() {\n  const { colorMode, toggleColorMode } = useColorMode();\n  const [token, setToken] = useState(\"\");\n  const [refresh, setRefresh] = useState(false)\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const userToken = localStorage.getItem(\"token\");\n    if (userToken) {\n      setToken(userToken);\n      setRefresh(true)\n    }\n  }, [refresh]);\n\n  const handleLogout = () => {\n    setToken(\"\");\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"username\")\n    setRefresh(false)\n    navigate('/login')\n    window.location.reload()\n\n\n\n  };\n\n  return (\n    <>\n      <Box bg={useColorModeValue(\"gray.100\", \"gray.900\")} px={4}>\n        <Flex h={16} alignItems={\"center\"} justifyContent={\"space-between\"}>\n          <Box fontWeight=\"bold\" >ðŸ’™BLUVAAðŸ’™ RANDOM MCQ GENERATOR</Box>\n\n          <Flex alignItems={\"center\"}>\n            <Stack direction={\"row\"} spacing={7}>\n              <Button>\n                <NavLink to={\"/profile\"} style={({ isActive }) => ({\n                  color: isActive ? 'dodgerblue' : '#333',\n                })}>\n                  <Text>{localStorage.getItem(\"username\")}</Text>\n\n                </NavLink>\n              </Button>\n\n              <Button>\n                <NavLink to={\"/\"} style={({ isActive }) => ({\n                  color: isActive ? 'dodgerblue' : '#333',\n                })}>\n                  <Text>Home</Text>\n\n                </NavLink>\n              </Button>\n\n\n              {\n                refresh ? (\n                  <Button onClick={handleLogout}>\n\n                    Logout\n                  </Button>\n                ) : (\n                  <Button >\n                    Sign in\n                  </Button>\n                )\n              }\n\n              <Button onClick={toggleColorMode}>\n                {colorMode === \"light\" ? <MoonIcon /> : <SunIcon />}\n              </Button>\n\n\n\n\n\n\n            </Stack>\n          </Flex>\n        </Flex>\n      </Box>\n    </>\n  );\n}\n","D:\\MY PRO SRC\\RANDOM_MCQ_GENERATOR\\client\\src\\Components\\QuestionChoice\\QuestionChoice.jsx",["55","56"],[],"import React, { useState, useEffect } from \"react\";\nimport {\n  Card,\n  CardHeader,\n  CardBody,\n  \n  Flex,\n  Heading,\n  Box,\n  Text,\n  Container,\n  Button\n  \n} from \"@chakra-ui/react\";\nimport { Link,useNavigate } from \"react-router-dom\";\nfunction App() {\n  const [questions, setQuestions] = useState([]);\n  const [userAnswers, setUserAnswers] = useState([]);\n  const [score, setScore] = useState(0);\n  const [showResult, setShowResult] = useState(false);\n\n  const navigate = useNavigate()\n\n  useEffect(() => {\n    generateQuestions();\n   \n\n  }, []);\n\n\n  \n  const generateQuestions = () => {\n    fetch(\"http://localhost:8000/api/generate/\")\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(\"Network response was not ok\");\n        }\n        return response.json();\n      })\n      .then((data) => {\n        console.log(data)\n        setQuestions(data)\n      })\n      .catch((error) => {\n        console.error(\"Error:\", error);\n        setQuestions([]);\n      });\n    console.log(questions)\n  };\n\n  const handleAnswerSelect = (questionId, selectedChoice) => {\n    const answer = { question_id: questionId, selected_choice: selectedChoice };\n    setUserAnswers((prevAnswers) => [...prevAnswers, answer]);\n\n    const question = questions.find((q) => q.id === questionId);\n    const isCorrect = selectedChoice === question.correct_choice;\n\n    if (isCorrect) {\n      console.log(\"CORRECT ANSWER ðŸ¤©ðŸ¤©ðŸ¤©\");\n\n      alert(\"CORRECT ANSWER ðŸ¤©ðŸ¤©ðŸ¤©\");\n    } else {\n      alert(\"WRONG ANSWER ðŸ¤”ðŸ¤”ðŸ¤”\");\n    }\n  };\n\n  const submitAnswers = () => {\n    fetch(\"http://localhost:8000/api/submit/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ user_answers: userAnswers }),\n    })\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(\"Network response was not ok\");\n        }\n        return response.json();\n      })\n      .then((data) => {\n        setScore(data.score);\n        setShowResult(true);\n      })\n      .catch((error) => {\n        console.error(\"Error:\", error);\n        setScore(0);\n        setShowResult(true);\n      });\n  };\n\n\n\n\n  const handledashboardinsert = async (e) => {\n    e.preventDefault();\n\n    const username = localStorage.getItem(\"username\")\n\n    const datas = {\n      usernameuser: username,\n      question1: questions[0].question_text,\n      question2: questions[1].question_text,\n      question3: questions[2].question_text,\n      question4: questions[3].question_text,\n      question5: questions[4].question_text,\n      scoredata: score\n\n\n\n    };\n\n    try {\n      const response = await fetch(\"http://localhost:8000/api/inserttoprofile/\", {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(datas),\n      });\n\n      if (response.ok) {\n        console.log('questions added successfully!');\n        navigate(\"/profile\")\n        \n      } else {\n        console.error('Error adding item:', response.statusText);\n      }\n    } catch (error) {\n      console.error('Error adding item:', error);\n    }\n  };\n\n  return (\n    <div className=\"\">\n      {showResult ? (\n        <Box mt={10}>\n          {/* <Heading mt={5}></Heading> */}\n\n          <Container mt={10}>\n            <Card>\n              <CardHeader>\n                <Heading size=\"md\" fontSize={\"3xl\"} mt={5}>\n                  Result Summary\n                </Heading>\n              </CardHeader>\n\n              <CardBody>\n                <Text fontSize={\"2xl\"}>\n                  {\" \"}\n                  Correct Answers: {score} / {questions.length}\n                </Text>\n              </CardBody>\n              <CardBody>\n                <Button onClick={handledashboardinsert}>\n                  Save\n\n                </Button>\n\n\n\n              </CardBody>\n            </Card>\n          </Container>\n        </Box>\n      ) : (\n        <Box>\n          {questions.map((question) => (\n            <Box key={question.id} >\n              <Container maxW={\"4xl\"}>\n              <Card mt={10} mb={10} maxW={\"3xl\"}>\n                <CardHeader>\n                  <Heading textAlign={\"center\"} size=\"md\">{question.question_text}</Heading>\n                </CardHeader>\n\n                <CardBody>\n                  <Flex\n                    align={\"center\"}\n                    justifyContent={\"space-between\"}\n                    spacing=\"4\"\n                  >\n                    <Box mb={5}>\n                      <Button\n                        onClick={() =>\n                          handleAnswerSelect(question.id, question.choice1)\n                        }\n                      >\n                        1. {question.choice1}\n                      </Button>\n                    </Box>\n                    <Box mb={5}>\n                      <Button\n                        onClick={() =>\n                          handleAnswerSelect(question.id, question.choice2)\n                        }\n                      >\n                        2. {question.choice2}\n                      </Button>\n                    </Box>\n                  </Flex>\n                  <Flex\n                    align={\"center\"}\n                    justifyContent={\"space-between\"}\n                    spacing=\"4\"\n                  >\n                    <Box mb={5}>\n                      <Button\n                        onClick={() =>\n                          handleAnswerSelect(question.id, question.choice3)\n                        }\n                      >\n                        3. {question.choice3}\n                      </Button>\n                    </Box>\n                    <Box mb={5}>\n                      <Button\n                        onClick={() =>\n                          handleAnswerSelect(question.id, question.choice4)\n                        }\n                      >\n                        4. {question.choice4}\n                      </Button>\n                    </Box>\n                  </Flex>\n                </CardBody>\n              </Card>\n              </Container>\n              \n            </Box>\n          ))}\n          <Container mb={20}  maxW={\"4xl\"}>\n            <Button width={\"3xl\"} colorScheme=\"blue\" onClick={submitAnswers}>\n              Get Summary\n            </Button>\n          </Container>\n        </Box>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","D:\\MY PRO SRC\\RANDOM_MCQ_GENERATOR\\client\\src\\Components\\Forms\\register.jsx",["57"],[],"import React, { useState} from \"react\";\r\nimport { useNavigate, Link } from \"react-router-dom\";\r\nimport {\r\n    Flex,\r\n    Box,\r\n    FormControl,\r\n    FormLabel,\r\n    Input,\r\n    \r\n    Stack,\r\n\r\n    Button,\r\n    Heading,\r\n    Text,\r\n    \r\n} from \"@chakra-ui/react\";\r\nfunction Register() {\r\n    const [username, setUsername] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    \r\n    const navigate = useNavigate();\r\n\r\n   \r\n    const handleRegister = async (e) => {\r\n        e.preventDefault();\r\n        if (username === \"\" || password === \" \") {\r\n            alert(\"Please fill the field first\");\r\n        } else {\r\n            try {\r\n\r\n                const response = await fetch(\"http://localhost:8000/api/signup/\", {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                    },\r\n                    body: JSON.stringify({\r\n                        username: username,\r\n                        password: password,\r\n                    }),\r\n                });\r\n\r\n                if (response.ok) {\r\n                    navigate(\"/login\");\r\n                } else {\r\n\r\n                    if (response.status == 409)\r\n\r\n                        alert(\"Username already exists\");\r\n\r\n                    console.log(\"Login failed\");\r\n                }\r\n\r\n            } catch (error) {\r\n\r\n                console.log(error)\r\n\r\n\r\n            }\r\n\r\n        }\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            \r\n            <Flex align={\"center\"} justify={\"center\"}>\r\n                <Stack spacing={8} mx={\"auto\"} maxW={\"lg\"} py={12} px={6}>\r\n                    <Stack align={\"center\"}>\r\n                        <Heading fontSize={\"4xl\"}>Create Your Account Now</Heading>\r\n                    </Stack>\r\n                    <Box rounded={\"lg\"} boxShadow={\"lg\"} p={8}>\r\n                        <Stack spacing={4}>\r\n                            <FormControl>\r\n                                <FormLabel>UserName</FormLabel>\r\n                                <Input\r\n                                    type=\"text\"\r\n                                    placeholder=\"Username\"\r\n                                    value={username}\r\n                                    onChange={(e) => setUsername(e.target.value)}\r\n                                />\r\n                            </FormControl>\r\n                            <FormControl id=\"password\">\r\n                                <FormLabel>Password</FormLabel>\r\n                                <Input\r\n                                    type=\"password\"\r\n                                    placeholder=\"Password\"\r\n                                    value={password}\r\n                                    onChange={(e) => setPassword(e.target.value)}\r\n                                />\r\n                            </FormControl>\r\n                            <Stack spacing={10}>\r\n                                <Button\r\n                                    onClick={handleRegister}\r\n                                    bg={\"blue.400\"}\r\n                                    color={\"white\"}\r\n                                    _hover={{\r\n                                        bg: \"blue.500\",\r\n                                    }}\r\n                                >\r\n                                    Create a account\r\n                                </Button>\r\n                            </Stack>\r\n                            <Text>\r\n                                Already have an account <Link to={\"/\"}>Sign in</Link>\r\n                            </Text>\r\n                        </Stack>\r\n                    </Box>\r\n                </Stack>\r\n            </Flex>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Register;\r\n","D:\\MY PRO SRC\\RANDOM_MCQ_GENERATOR\\client\\src\\Components\\Forms\\login.jsx",[],[],"D:\\MY PRO SRC\\RANDOM_MCQ_GENERATOR\\client\\src\\Components\\DashBoard\\Profile.jsx",["58"],[],"import { Box, Heading, Text, Card, CardHeader, CardBody, CardFooter, Button, Container } from '@chakra-ui/react';\r\nimport { useEffect, useState } from 'react';\r\nimport Navbar from '../Navbar/Navbar';\r\n\r\nfunction Profile() {\r\n    const [questionsdata, setQuestionsdata] = useState([]);\r\n\r\n    useEffect(() => {\r\n        getProfileQuestions();\r\n    }, [questionsdata]);\r\n\r\n    const getProfileQuestions = async () => {\r\n        try {\r\n            const response = await fetch(\"http://localhost:8000/api/getprofile/\", {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                },\r\n                body: JSON.stringify({ username: localStorage.getItem(\"username\") }),\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(\"Network response was not ok\");\r\n            }\r\n\r\n            const data = await response.json();\r\n            console.log(data);\r\n            setQuestionsdata(data);\r\n            console.log(questionsdata)\r\n        } catch (error) {\r\n            console.error(\"Error:\", error);\r\n           \r\n        }\r\n    };\r\n\r\n\r\n    const getProfileQuestionsDelete = async (id) => {\r\n        try {\r\n            const response = await fetch(\"http://localhost:8000/api/getprofiledelete/\", {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                },\r\n                body: JSON.stringify({ quesid: id }),\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(\"Network response was not ok\");\r\n            }\r\n\r\n\r\n            \r\n        } catch (error) {\r\n            console.error(\"Error:\", error);\r\n            \r\n        }\r\n    };\r\n\r\n    return (\r\n        <Box>\r\n            <Navbar />\r\n            <Box p={10}>\r\n                <Heading mt={7}>My profile</Heading>\r\n\r\n                <Box mt={10} maxW={\"3xl\"}>\r\n                    {Array.isArray(questionsdata) && questionsdata.length > 0 ? (\r\n                        questionsdata.map((user) => (\r\n                            <Container mt={5} key={user.id}>\r\n                                <Card>\r\n                                    <CardHeader display={\"flex\"} alignItems={\"center\"} justifyContent={\"space-between\"}>\r\n                                        <Heading size='md'>{user.username}</Heading>\r\n                                        <Text>{user.created_at}</Text>\r\n                                    </CardHeader>\r\n                                    <CardBody>\r\n                                        <Text>{user.question1}</Text>\r\n                                        <Text>{user.question2}</Text>\r\n                                        <Text>{user.question3}</Text>\r\n                                        <Text>{user.question4}</Text>\r\n                                        <Text>{user.question5}</Text>\r\n                                      \r\n\r\n                                        <Text>Correct answers : {user.scoredata} / 5</Text>\r\n\r\n\r\n\r\n                                    </CardBody>\r\n                                    <CardFooter>\r\n                                        <Button onClick={() => getProfileQuestionsDelete(user.uuid)} colorScheme='red'>Delete</Button>\r\n                                    </CardFooter>\r\n                                </Card>\r\n                            </Container>\r\n                        ))\r\n                    ) : (\r\n                        <Text>No questions data available.</Text>\r\n                    )}\r\n                </Box>\r\n            </Box>\r\n        </Box>\r\n    );\r\n}\r\n\r\nexport default Profile;\r\n",{"ruleId":"59","severity":1,"message":"60","line":11,"column":10,"nodeType":"61","messageId":"62","endLine":11,"endColumn":17},{"ruleId":"59","severity":1,"message":"63","line":17,"column":10,"nodeType":"61","messageId":"62","endLine":17,"endColumn":15},{"ruleId":"59","severity":1,"message":"64","line":15,"column":10,"nodeType":"61","messageId":"62","endLine":15,"endColumn":14},{"ruleId":"65","severity":1,"message":"66","line":28,"column":6,"nodeType":"67","endLine":28,"endColumn":8,"suggestions":"68"},{"ruleId":"69","severity":1,"message":"70","line":46,"column":41,"nodeType":"71","messageId":"72","endLine":46,"endColumn":43},{"ruleId":"65","severity":1,"message":"73","line":10,"column":8,"nodeType":"67","endLine":10,"endColumn":23,"suggestions":"74"},"no-unused-vars","'refresh' is assigned a value but never used.","Identifier","unusedVar","'token' is assigned a value but never used.","'Link' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'generateQuestions'. Either include it or remove the dependency array.","ArrayExpression",["75"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'getProfileQuestions'. Either include it or remove the dependency array.",["76"],{"desc":"77","fix":"78"},{"desc":"79","fix":"80"},"Update the dependencies array to be: [generateQuestions]",{"range":"81","text":"82"},"Update the dependencies array to be: [getProfileQuestions, questionsdata]",{"range":"83","text":"84"},[544,546],"[generateQuestions]",[350,365],"[getProfileQuestions, questionsdata]"]